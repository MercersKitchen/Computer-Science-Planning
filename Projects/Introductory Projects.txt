Design Thinking: Empathizing, Defining, Ideating, Prototyping, Testing
Computational Thinking: ask and answer questions to solve problems with patterns and counting
Developing systems that make choices based on assumptions

Assessment: Group Points for marks based on outcome and challenges
- Individual Points illustrated on a website, static (CS10)
  Websites includes "Who Am I Portfolio", Portfolio Mentoring, & Interactive Essay
- Output grading sheet using JavaScript (self assessment built in intermediate CS)

Introductory CS teaches
- how to write a program's GUI to any monitor
- how to take sensor data & visual data and automate programs
- how to own your own data

"How to Develop and App"
- Graphical User Interface (GUI): communication with device before program executes
  Delivers geometry
- Variables: predefined, calculated, sensor populated, API populated, file.txt IO
- End-user Ideas

3 Case Studies for App Design
- Note: for each one must calculate ratios for full screen
- Creating a Drawing Program: Large drawing division, Left Hand & Right Hand Pickers (Background Images, 2D-Moveable Tiles, Changing Ink Colours)
- Creating a Music Program: Minimalist Design of 2D Shapes, 4-buttons (Play, Pause, Stop, Next, Previous), 5 Other Features of a Music Player
- Creating a Final Project ("What will yours be?")

Mathematics and Algorithms for End-user Ideas
- Counting Patterns and Concepts (how does a Math 10C count?)
  - Forwards
  - Backwards
  - Arithmetic
  - Geometric
  - Squares
  - Combinations (slope, polynomials, etc.)
  - Using time from the Operating System or in Processing-Java (milli-seconds from crystal)
- Summarizing counting into
  - Ranges (max - min)
  - Central Tendency: mean, median, mode
- Start and stop counting (boundaries of variables)
  Evaluating type of number with modulus
  Console output to whether code makes it into IF
- Separating the GUI Space intentionally for feedback
  Nested counting (nested FOR Loops)
  "Chess Board" or "Table for Tiles on a Tablet Screen"
- Changing Visual Data based on calculations
  - Hello World Type Programs for developing touch screens
  - Clicking Game with timer, taking best times and giving feedback on times that seem in error





UNDER CONSTRUCTION: "How to code a robot": , planter (3 plants)
- incorporate
- racing a line follower in a track (Sandwich)
  analogue to digital to camera
- planter (with website?)
- Goals or Purpose: map environment for possible choices based on hard coded assumptions

UNDER CONSTRUCTION: "Device into Data Collection Tool"



Ideas to Incorporate
- Cell Phone Sensors
- Use Tablets
- Arduino Car Breadboards
- Planter
- VR Experience through camera
- Race cars
- Wireless RPi router to send information
- First course
- Bread boarded Arduino to learn sensors and code
- Build robots quickly and do code
- Sensors and computing with code
- Not databases or websites, etc.
- Augmented reality app your of QE
- Developing a calculator: bartering for a price
  Understanding a profit-loss graph
  Using formulae to guide responses
