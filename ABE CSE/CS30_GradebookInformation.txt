Information is Unique to Alberta Education and Schools in Alberta

**UNDER CONSTRUCTION**

Courses Available - Depending on Student Experience

CSE3010 - Computer Science 3 (Needs CSE2010: Computer Science 2)
CSE3120 - Object-Orientated Programming 1 (Needs CSE2110: Procedural Programming 1)
CSE3130 - Object-Orientated Programming 2 (Needs CSE3120: Object-oriented Programming 1)
CSE3110 - Iterative Algorithm 1 (Needs CSE2120: Data Structures 1)

CSE3210 - Server-side Scripting 1 (Needs CSE2210: Client-side Scripting 3, CSE2110: Procedural Programming 1, CSE2120: Data Structures 1)

Optional course for CSE3130: Object-orientated Programming 2
- CSE3910: CSE Project D

CSE3020: Computer Science 4 (Needs CSE3010: Computer Science 3, CSE3110: Iterative Algorithm 1)
CSE3310: Recursive Algorithms 1 (Needs CSE3110: Iterative Algorithm 1, CSE3120: Object-oriented Programming 1)
CSE3320: Dynamic Data Structures 1 (Needs CSE3310: Recursive Algorithms 1)
CSE3330: Dynamic Data Structures 2 (Needs CSE3320: Dynamic Data Structures 1)
CSE3340: Dynamic Data Structures 3 (Needs CSE3330: Dynamic Data Structures 2)

Option CSE3020: Computer Science 4 OR CSE3340: Dynamic Data Structures 3
- CSE3920: CSE Project E

Purposes: all end in Presentation to Industry and/or Post Secondary
- Review all of Processing-Java
- Combine Processing-Java and Pure-Java Classes to handle visual data
- Use Command Line, WYSIWYG, & Java Compiler to handle text data
- Option: Using a Raspberry Pi to explore hardware of a computer, Physical Computing
- Optional: enrichment with Server-side topics,

2018-2019 School Year

Main Assignment Titles Per Course, for gradebook listings (Unique to ABE)

General Assignment Titles for Individual Study Projects
- Assignments
- Anecdotal Records, Testing, and Debugging
- Project Planning
- Major Project

Note: AP CSP & AP CSA is included in another section
- See: https://github.com/MercersKitchen/Computer-Science-Planning/tree/master/AP%20CSP%20CSA

**UNDER CONSTRUCTION**

CSE3010 - Computer Science 3
- Developer Tools
  - Examples
    - Processing.Java: Export (getting Jar Files)
    - GitHub: creating a release (including Jar Files and Uploading to GitHub or Google Drive)
- Algorithms (i.e. Pong)
  - Case Study: ReadMe File Notes
  - General Behavioral Algorithms
- Reviewing Pong
  - Algorithms for Calculation (simple, mine)
  - Accumulation (scoreboard)
  - Oscillating Geometric Sequences (bounce or -1)
  - Linear Program
  - Procedural Program
- ??
  - Social Implications of information society and AI Society
   (economic, social, political, educational, and a shift from the Industrial Revolution)

Searching for Projects to better use
Relationships between binary & hexadecimal number systems, data encoding, and logic gates
  - Compare and Contrast binary and hexadecimal with decimal including
    - Converting between number systems
    - Describe and demonstrate the role of each number system in for encoding digital data
  - Binary Arithmetic
    - Simple binary addition truth table (AND, OR, NOT)
  - Represent Circuits (general and logic) using binary notation
    - AND
    - OR
     - NOT
     - NAND
     - NOR
  - Simple operations with logic gates including
    - Binary addition with full and half adders
    - Binary subtraction with full and half subtractions
    - Tasks involving selection
    - Tasks involving inversion

CSE3120 - Object-Orientated Programming 1
- Classes Introduction
  - Object Orientated Pong (copy of procedural, rewritten as objects)
  - Aware of instantiation of objects
  - Moving Ball & Many Ball Prototyping
  - OOP Pong with Object-specific functions, like many pong balls
  - Access Modifiers: Public (default), private, static, final
  - Functions for Access Modifiers: Public Getters and Setters
- Class Vocabulary
- Lists Instantiate Objects
- "Class" Assignments

Additional Reminders about Object-Orientated Programming 1
  Object Oriented Programming Vocabulary & Evaluation (comparing and contrasting with Procedural, Structural)
    - Further modularity
    - Protecting and hiding of data
    - Use of interfaces to maintain implementation independence
    - Organizing Algorithms and Program
    - Abstraction
    - Encapsulation
    - Inheritance
    - Polymorphism
    - Instantiation
    - Classes, Class Libraries, Objects

  Object Orientated Design Techniques
    - Analysis: Case, Domain, Object
    - Iterative Class Design: Principal Classes, Elaboration of object diagrams, class-responsibility-collaboration cards, iterative prototyping
    - Relationships: dependency, association, aggregation, composition

  Core Concepts and Vocabulary
    - Exchange of “messages” among “objects”
    - Key Features:
      - Encapsulation
      - Modularity
      - Polymorphism
      - Inheritance
    - Algorithm writing skills
      - Small number of classes and objects
      - Associative relationships
    - Object-orientated design process
      - Requirement analysis
      - Case analysis
      - Domain analysis
      - Iterative and incremental design to refine architectures illustrating relationships between classes and objects (messages passed between objects, and object interface)
      - Diagram object message flow in a program
      - Complete object design by adding private methods, functions and data structures
    - Translation from Algorithms and various diagrams to source code
      - Take problem and section it accordingly for prototyping approach
      - Create classes and instantiate objects, related to the algorithm
      - Use server classes to create client classes establishing server/client relationship of the algorithm
      - Create internal and external documentation
      - Analyze run time errors

Searching
Class Design and Structure


CSE3130 - Object-Orientated Programming 2 (Needs CSE3120: Object-oriented Programming 1)
- Pong Class Hierarchy
- Pong Debug & Iteration

Additional Reminders about Object-Orientated Programming 2
  Purpose, adding to OOP1
    - Using some techniques of UML Design
    - Explore association between classes using …
    - Abstract classes,
    - Templated classes,
    - Containment and inheritance to promote reusability

  Core Concepts of Class and Object Interactions
    - Coding can be reduced and responsibilities distributed through
      - polymorphism and inheritance
      - Composition and aggregation
    - Hiding data or protecting data using
      - Static classes
      - Polymorphism
      - Inheritance
    - Problem Solving
      - Top-down design using class diagram representing matrix of interacting classes
      - Informal (perhaps case analysis like) object message diagram

CSE3110 - Iterative Algorithm 1 (Needs CSE2120: Data Structures 1)
- Introduction to Searches
- Prototyping Binary Searches (Including Linear)
- Prototyping Sorts (exchange (bubble), insertion and selection, simple merge)
- Text Searches (i.e. Essay Grader, Chatbot)
- OPTION: Main Project Searches

Additional Reminders about Iterative Algorithm 1
  Purpose (iterative versions of the following)
    - Binary Search
    - Sorts: exchange (bubble), insertion and selection, simple merge
  Common Iterative Algorithms (search, sort, merge)
    - Compare and Contrast
    - Explain
    - Described data structures required
    - Describe how to implement algorithms
    - Example Search Algorithms
      - Linear
      - Binary
    - Example Sort Algorithms
      - Exchange: bubble sort, cocktail sort, gnome, comb
      - Selection: selection, strand
      - Insertion: insertion, library
    - Example simple iterative merge algorithms (keep it simple)
  Create and /or modify algorithms and programs that use searches, sorts and merges to solve problems
    - Create Algorithm and /or apply to data
    - Translate to code
    - Use original (user-created) or pre-existing algorithm code appropriate for the data
    - Use appropriate operators, methods, functions, or procedures for standard algorithms
    - Using internal and external documentation
    - Use error-trapping mechanisms and programmer-directed error trapping techniques to eliminate logic errors and debug the program
    - Compare intent of algorithms and debugged program

**UNDER CONSTRUCTION REMINDER**

CSE3210 - Server-side Scripting 1
•	CSE2210: Client-side Scripting 3
•	CSE2110: Procedural Programming 1
•	CSE2120: Data Structures 1

Purpose
•	Combine dynamic websites to server-side scripting
•	Using simple databases
•	Access and using …
•	Webserver
•	Database management
•	Server-side scripting languages

Writing server-side scripting features
•	Compare and contrast server-side scripting with dynamic client-side scripting for the purpose of combining these
o	Limitations of dynamic client-side (logging in, preferences, etc.)
o	Security
o	Quality of experience
o	Developer control of application environment
o	Greater interactivity
o	Scalability and Maintainability
o	Explore web applications available
o	Compare server-side languages with client-side languages
o	Explore disadvantages of server-side scripting
•	Use of a database and it’s management
o	Determine data handling requirements and limitations of various databases

Code Academy: PHP, SQL
•	Additional Lessons in W3 Schools
Overlapping assignments from previous courses
•	Project Planning – Text Features
•	Project Planning – Website Features
•	Website Project – Beginning (Website Layout with navigation, coming soon pages)
•	Website Project – Final Product (Grading the final project website)

Example Gradebook Divisions
•	WAMP Server Hello World in PHP
•	Google Sheets Hello World
•	Threadly as Frontend: HTML5 review
Case Study of Threadly
•	Threadly with PHP Forms
•	Threadly with Google Forms
•	PHP Project

•	PHP Code Academy (Closed Site) 1 Day Introduction and Completion

CSE3210: Server-side Scripting 1
Crafting dynamic websites by adding databases as a repository for information displayed on their websites
Use Code Academy PHP Course
Introduction to CSV Files, Arrays & referencing Arrays, and other data Structures
See U:\Files\Courses\ComputerScienceStream\Websites_Main_Project


Optional course for CSE3130: Object-orientated Programming 2
CSE3910: CSE Project D
- Purpose: workflow of project management, individually monitored and communicated prior to building
  - Identify the project
	- Prepare a plan
	- Clarify Purposes
	- Defining deliverables
	- Specifying timelines
	- Explaining terminology, tools, and processes
	- Defining resources, materials, costs
	- Identify assessment standards, attaining metrics
	- Present proposal, obtain necessary approvals
- Student Considerations
  - Complete project and performance as outlined and planned
	- Monitor project and performance, making and recording necessary adjustments
	- Present project and performance, indicating outcomes attained and relationship of outcomes to goals originally set
	- Evaluate project and performance indicating the processes and strategies used
	- Make recommendations on how the project and performance could be improved
Assignment Titles for Gradebook
- Project Planning
- Anecdotal Grading, Testing & Debugging
- Final Project Experience & Code  


CSE3020: Computer Science 4
•	Needs CSE3010: Computer Science 3
•	Needs CSE3110: Iterative Algorithm 1


Purpose
•	Standard abstract data types and dynamic data structures to implement them
•	Asymptotic analysis of algorithmic efficiency and indicate that efficiency using big O notation
•	Explore the Turing Machine

Dynamic abstract data types (ADTs) key operations, utility, and structure
•	List and Explain advantages and disadvantages of dynamic ADTs
•	Common and Useful ADTs: Lists, Stacks, Queues and priority queues, Sets, Maps, Trees
•	Dynamic Data Structures (user-created): dynamic arrays & associated arrays, linear linked structures, hash tables, class libraries
•	Common data operations:
o	traversing items in data structure
o	finding and / or retrieving item
o	adding – removing – replacing an item
o	determine the size of the structure
o	determining if the structure is empty
o	providing a copy of the subset of the collection
o	comparing or combing data structures of the same type

Asymptotic Analysis of algorithmic efficiency (approaches and nomenclature)
•	describe asymptotic analysis
•	relationship of efficiency and complexity
•	represent efficiency and complexity of an algorithmic using big O notation including
o	Constant growth
o	Logarithmic growth
o	Linear growth
o	Linearithmic growth
o	Polynomial growth
o	Exponential growth

Recursive and Introductory Recursive operations rational
•	Compare and contrast recursion with iteration
•	Program flow
•	Problems that require recursive processes

Turing Machine
•	Uses
•	Represent
•	Execute simple programs
•	Create simple state representations

CSE3310: Recursive Algorithms 1
•	Needs CSE3110: Iterative Algorithm 1
•	Needs CSE3120: Object-oriented Programming 1

Purpose
•	Write recursion algorithms for …
•	Binary search
•	Quicksort
•	Merge sort
•	Heapsort

Core Concepts and Vocabulary
•	Define themselves in terms of themselves
•	Purpose of the base case
•	Divide and Conquer approach to creating recursion
•	Interchangeability of recursive and iterative algorithms
•	Compare and contrast recursion and iteration emphasizing efficiency in space and time
•	How recursion creates dynamic data structures
•	Tail End vs. Head End recursion
•	Explain how the system stack (or equivalent structure) is used to carry out recursive operations

Write algorithms and source code for binary search, and various sorts (quick, merge, heap)
•	How each contributes to problem solving
•	Illustrating why each will work or not work, referencing efficiency








CSE3320: Dynamic Data Structures 1 (Needs CSE3310: Recursive Algorithms 1)

Purpose
•	Use source code that contains abstract data types utilizing dynamic data structures
•	Explore dynamic memory allocations
•	Focus on linked list dynamic data structure (s) used to implement abstract data types

Core Concepts and Vocabulary
•	Compare and contrast dynamic and static data structures
•	Dynamic memory allocations
o	Heap
o	Pointers and/or references
o	Linear and non-linear data structures
•	Explore Linked List
o	Components of abstract data types
o	Logical structure of linked list: nodes, fields, references, & pointers
o	Other linked lists: double-linked, circular-linked, ordered linked

Operators
•	Creating linked list
•	Inserting a node
•	Traversing
•	Deleting node
•	Replacing node
•	Finding and retrieving data
•	Determining the size

Use Linked lists to problem solves, write algorithms and source code
•	Explore the types of problems linked lists solved well and begin to form the boundaries of applicable problems




CSE3330: Dynamic Data Structures 2 (Needs CSE3320: Dynamic Data Structures 1)

Purpose
•	Expand dynamic data structures to include stacks and queues
•	Incorporate unordered structures (set and map) into abstract data types (ADTs)
•	Additionally, incorporate linked lists to create stacks and queues

Core Concepts
•	Mechanics of stacks, queues, sets, and maps
•	Logical structure of stacks, ques, sets and maps
•	Making choice of ADT and data manipulation depending on problem suitability

Standard operators associated with stacks, ques, sets and maps
•	Create the data structure
•	Copy the data structure (cloning, deep copy, location of memory, place on the hard drive copy is pointing to))
•	Push, Pop and Peeks for stacks
•	Enqueue and Dequeue for queues
•	Link Keys and Values for maps
•	Search, insert, remove and modify data elements in sets and/or maps
•	Determine equality between sets
•	Determine union, intersection, difference, and symmetric difference
•	Delete the data structure

Write source code for stacks and queues: create, modify, error-trap, debug




CSE3340: Dynamic Data Structures 3 (Needs CSE3330: Dynamic Data Structures 2)

Purpose
•	Hierarchically linked data structures
•	Study general trees, binary trees, binary search trees, and heaps
•	Learn how to use binary search trees to implement sorted sets, sorted maps, and heaps to implement priority queues

Core Concepts
•	Tree data structures as containers for ADS
•	Problem solving and using each tree data structure and its paired abstract data type
•	Logical structure of tree data structures: general trees, binary trees, binary search trees, heaps

Standard Operators associated with treed data structures
•	Create the data structure
•	Copy the data structure (cloning, deep copy, location of memory, place on the hard drive copy is pointing to))
•	Preorder, in-order, post-order and level order for traversals
•	Search, insert, remove and modify data elements
•	List data elements accumulated by a tree traversal
•	List pop and heapify operation for heaps
•	Delete the data structure

Write source code for stacks and queues: create, modify, error-trap, debug





Option CSE3020: Computer Science 4 OR CSE3340: Dynamic Data Structures 3
CSE3920: CSE Project E
