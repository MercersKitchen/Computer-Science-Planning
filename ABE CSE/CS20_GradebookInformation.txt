Information is Unique to Alberta Education and Schools in Alberta

**UNDER CONSTRUCTION**

Courses Available - Depending on Student Experience
CSE2010 - Computer Science 2
  - Needs CSE1010 - Computer Science 1, CSE1120: Structured Programming 2
CSE1220 - Client-Side Scripting 2 (HTML5), No Pre-requisites
CSE2210 - Client-Side Scripting 3 (HTML5)
  - Needs CSE1220: Client-side Scripting 2
  - Needs CSE1120: Structured Programming 2
CSE2110 - Procedural Programming 1 (Needs CSE1120: Structured Programming 2)
CSE2120 - Data Structures 1 (Needs CSE2110: Procedural Programming 1)
CSE2910 - CSE Project B
CSE2130 - Files and File Structures 1 (Needs CSE2120: Data Structures 1)

Purposes: all end in Presentation to Industry and/or Post Secondary
- Build HTML5 Websites for Promotion and hosting (GitHub) by focusing on JavaScript using JSFiddle
- Build more efficient and layered Android Apps with Java through the Processing IDE, using procedural programming methods
- Introduce APIs and JSON Data
- Option: Using a Raspberry Pi to explore hardware of a computer, Physical Computing

2018-2019 School Year

Main Assignment Titles Per Course, for grade-book listings (Unique to ABE)

General Assignment Titles for Individual Study Projects
- Assignments
- Anecdotal Records, Testing, and Debugging
- Project Planning
- Major Project

Note: Students have the option of completing Online MOOCs like
- Code Academy: HTML, CSS, JavaScript, "How to Build a Website",
  "Make an Interactive Website"

CSE2010 - Computer Science 2
- Developer Tools
  - New: using online HTML Mapped Image Tools and Other Website Developer Tools
  - New: using JSFiddle to Prototype HTML5 in webpage development
  - New: Using Multiple Screens or Ctrl-TAB to increase workflow
  - CS1: Using Email, Using GitHub, Using Educational Tools like Google Classroom
- Algorithm Introduction
- Algorithm Guide (to Software Development)

CSE1220 - Client-Side Scripting 2 (HTML5), No Pre-requisites
- **Refer to Websites.txt**
- JavaScript Algorithms (all contained in JavaScript Website below)
  - Sequencing
  - Selection
  - Iteration
  - Accumulation
  - Determining maximum or minimum values
- JavaScript Notes & Assignments
  - What to Grade (Note: some ideas overlapping)
    - Webpage Project: JavaScript using HTML Forms
    - Document Map:
      index.html hyperlinked childPages.html, all connected to .js files
    - Webpage Planning:
      Text and Visual Features (including images, etc.), Case Study
    - HTML Forms & Data Flowchart Analysis
  - Skills to Grade
    - Adding and/or Modifying childPages.html, working by rendering
    - Adding and/or Modifying associated .js files,
      demonstrated by debugging code "Made it to childTemplate.js"
    - Aware of referencing proper IDs from HTML to copied .js file
  - Problem Solve with JavaScript
    Conditional & Iterative Blocks
    Processed data properly formatted and rendered to Browser
  - JavaScript Website Assignments Names
    (Listing of Assignments without including in final grade,
     due to overlapping expectations)
    - LandScape or Portrait
    - Max of Two Numbers
    - Ordering Grades
    - Modulus
    - Demerit Points
    - FizzBuzz
    - Greeting Someone
- JavaScript IOP Assignments
  - Outputting to the Console
  - JavaScript as Structured Programming (SP1 & SP2)
  - Primitive Data Structures in JavaScript
    Variables and Constants
    Assignment
    Types: Arithmetical, relational, Boolean, concatenation, and string
           construction operators
- Webpage Form (dynamic)
  - Buttons and Interactions
  - HTML Form
  - Use JavaScript to store user data
  - Explore how to solicit user input
  - Displaying dynamic client-side information (Determine content rendering)
  - Determine input managing, subsequent interaction
  - CSS is either a script within index.html or a linked file
- CSS (styling)
  - See Optional Assignment below for ideas

Optional CSS2 Assignmenmt, maybe combined with CSS3
- Using JS Fiddle
- Use decomposition design and variable naming abstraction to CSS Files
  Classes
  IDs
- Use CSS to add style to HTML
  File Type: Embedded in HEAD or Separate Files

CSE2210 - Client-Side Scripting 3 (HTML5)
- **Refer to Websites.txt**
- Note: assessment includes all of Client-side Scripting 1 & 2,
  Computer Science 1 & 2, Procedural Programming 1, Data Structures, and
  Structured Programming 1 & 2 (if at beginning of course, might be a review or
  introduction to these outcomes)
- CSS (for HTML5)
  See Optional CSS2 Assignment Above
  Combined with JS Fiddle Exploration Here
- JavaScript Data Structure: Arrays and Rest Operator
  "JS DS: Arrays and Rest Operator"
  - CSS2 JS Ordering Grades Assign and other bonus pieces will satisify this 
- JavaScript: Writing Functions
  "JS: Writing Functions"
  - Goal: Reusable code efficiently designed (maintainability & extendibility)
  - Goal: Site security by imported data hiding and information protection
  - VOID and Return Functions
  - Parameters and Arguments
  - Abstracting a Behavior: group block of code, generalize IOP
  - Reading and writing arrays, using arrays ("memories of a computer")
  - Creating personal libraries of HTML5 Scripts for intended purposes
    Internet Found and Evaluated
    Personally written for website project
  - Purposes for personal Libraries
    Code reuse: procedural and objects
    Security: data hiding and information protection
    Readability
    Promotion of collaboration
    Reduction of unwanted side effects
- Website Planning (Buisness Website): Behaviors, Link Maps
- Website Project (Buisness Website): Business-style Webpage
  - Case Study
  - Project and GitHub Folder Structure
  - Case Study
  - To Do List out of Case Study
  - Case Study or To Do List documents content to use or create
  - All index.html and childTemplate.html properly named and hyperlinked
  - All associated index.js and childTemplate.js named and linked
  - All index.css and childTemplate.css named and linked
  - Content matches Case Study
  - Able to browse website and various pages
  - **Rubric Under Construction**
- Developer Tools & Hosting
  GitHub Repo Hosting and Work
  GitHub Hosted Websites or Raspberry Pi Hosted Websites
  Other Options
- ???
  Paper and Pencil Fail Test (Case Study or Real Website) with "pre" and
  "post" conditions, program control mechanisms, and data processing

CSE2110 - Procedural Programming 1 (Needs CSE1120: Structured Programming 2)
- Review of CS10, Timer App
- Case Study
- Prototyping Procedures (no return)
  - Timer App
  - Weather App
  - Library 
- Prototyping Functions (return)
  - Calculators: text, images
  - Weather App: API Calls and functions dependant of API Calls
- App Engine Development
  - Incorporating Procedures and Functions
  - Library Introduction

CSE2120 - Data Structures 1 (Needs CSE2110: Procedural Programming 1)
- Array Introduction
  - If in CS30, using Arrays in Pong
  - Single Arrays
  - Double Arrays (tables, esp. in File IO)
  - Parallel Arrays (look-up or associative tables)
  - Records: mapping array functions with types of records
    - Static List
    - Add to beginning, middle, or end
    - Copying Arrays and issues of time during main record build
- Array Operations
  - Creating Structures
  - Inserting, deleting, and replacing data in the structure
  - Searching, Finding, and retrieving data from the structure
  - Determining the size of the structure
  - Copying the structure
  - Comparing two structures of the same type
- Building Text Field: character to word to phrase using concatenation
  (Alternate Assignment Name: Data Structure Applications)
  - Using memory structures to "remember"
  - Case Study and Diagram of what should happen
  - Using error trapping (i.e. NaN to ID when numbers are typed in error)
- JSON Data
  - Accessing, verifying, using validation tools like JSON Lint
  - 'Unwrapping' and Assigning to Variables
  - Using Pieces inside program, between programs (i.e Unix Time Stamp Converter)
  - Creating JSON File IO

CSE2130 - Files and File Structures 1 (Needs CSE2120: Data Structures 1)
- File Input & Output
  - Text, CSV
  - JSON
- Case Study: how algorithm will incorporate File IO
- Prototyping File IO
  - End of Program
  - During Program
- Example of Using File IO in project
  - ex. Weather App

CSE2910: CSE Project B
- Purpose: workflow of project management, individually monitored and communicated prior to building
  - Identify the project
	- Prepare a plan
	- Clarify Purposes
	- Defining deliverables
	- Specifying timelines
	- Explaining terminology, tools, and processes
	- Defining resources, materials, costs
	- Identify assessment standards, attaining metrics
	- Present proposal, obtain necessary approvals
- Student Considerations
  - Complete project and performance as outlined and planned
	- Monitor project and performance, making and recording necessary adjustments
	- Present project and performance, indicating outcomes attained and relationship of outcomes to goals originally set
	- Evaluate project and performance indicating the processes and strategies used
	- Make recommendations on how the project and performance could be improved
Assignment Titles for Gradebook
- Project Planning
- Anecdotal Grading, Testing & Debugging
- Final Project Experience & Code  


**UNDER CONSTRUCTION**
All Main Projects need to include
2D Shapes
Text
Images
Sound
Quit Button
Time Measure

Main Projects
Cue Cards
20 Images
Alternate Cue Cards
Other Project
Collisions (see Alternate Cue Cards)
Decision Trees (see 20 Images)
